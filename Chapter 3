import tkinter as tk
from tkinter import ttk

def update_greeting():
    user_name = name_entry.get()
    selected_color = color_var.get()

    greeting_label.config(text=f"Hello, {user_name}!", foreground=selected_color)

root = tk.Tk()
root.title("GUI that greets a user personally")

input_frame = ttk.Frame(root, padding=10, style="Blue.TFrame")
input_frame.grid(row=0, column=0, padx=10, pady=10)

input_frame.columnconfigure(0, weight=1)

title_label = ttk.Label(input_frame, text="Chapter 3 - Exercise 1", style="Red.TLabel")
title_label.grid(row=0, column=0, columnspan=2, pady=10)

name_label = ttk.Label(input_frame, text="Write your name and be personally greeted:")
name_label.grid(row=1, column=0, sticky="E")

name_entry = ttk.Entry(input_frame)
name_entry.grid(row=1, column=1, pady=5)

color_label = ttk.Label(input_frame, text="Pick the color that the text will appear in:")
color_label.grid(row=2, column=0, sticky="E")

colors = ["red", "green", "blue", "purple", "orange"]
color_var = tk.StringVar(value=colors[0])

color_menu = ttk.Combobox(input_frame, textvariable=color_var, values=colors)
color_menu.grid(row=2, column=1, pady=5)

update_button = ttk.Button(input_frame, text="Update the greet name and color", command=update_greeting)
update_button.grid(row=3, column=0, columnspan=2, pady=10)

#this creates the display frame and configures it
display_frame = ttk.Frame(root, padding=10, style="Green.TFrame")
display_frame.grid(row=0, column=1, padx=10, pady=10)

greeting_label = ttk.Label(display_frame, text="", style="Label.TLabel")
greeting_label.grid(row=0, column=0)

#this defines the styles of the multiple colored frames
style = ttk.Style()
style.configure("Blue.TFrame", background="lightblue")
style.configure("Green.TFrame", background="lightgreen")
style.configure("Blue.TLabel", background="lightblue", foreground="blue")
style.configure("Label.TLabel", font=("Helvetica", 16))

root.mainloop()
---------------------------------------------------------------------------------
import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk

class CoffeeVendingMachine:
    def __init__(self, root):
        self.root = root
        self.root.title("Coffee Vending Machine (Chapter 3 - Exercise 2)")

        #this defines the coffee options as well as the prices
        self.coffee_options = {
            "Espresso": 5.00,
            "Cappuccino": 4.00,
            "Latte": 2.50,
        }

        self.selected_coffee = tk.StringVar()
        self.selected_coffee.set("Espresso")

        self.sugar_var = tk.IntVar()
        self.milk_var = tk.IntVar()

        #these are the defined variables for handling money
        self.payment_var = tk.DoubleVar()
        self.change_label = ttk.Label(self.root, text="Change: DHS 0.00")

        #this creates the frame
        self.frame = ttk.Frame(self.root, padding=10)
        self.frame.grid(row=0, column=0)

        #this creates the selection label and dropdown
        coffee_label = ttk.Label(self.frame, text="Select your desired coffee:")
        coffee_label.grid(row=0, column=0, padx=10, pady=5, sticky="W")


        coffee_dropdown = ttk.Combobox(self.frame, textvariable=self.selected_coffee, values=list(self.coffee_options.keys()))
        coffee_dropdown.grid(row=0, column=1, padx=10, pady=5)

        # Create options for sugar and milk
        sugar_checkbox = ttk.Checkbutton(self.frame, text="Sugar", variable=self.sugar_var)
        sugar_checkbox.grid(row=1, column=0, padx=10, pady=5, sticky="W")

        milk_checkbox = ttk.Checkbutton(self.frame, text="Milk", variable=self.milk_var)
        milk_checkbox.grid(row=1, column=1, padx=10, pady=5, sticky="W")

        #this is the label for the payment
        payment_label = ttk.Label(self.frame, text="Payment (DHS):")
        payment_label.grid(row=2, column=0, padx=10, pady=5, sticky="W")

        payment_entry = ttk.Entry(self.frame, textvariable=self.payment_var)
        payment_entry.grid(row=2, column=1, padx=10, pady=5)

       #this is for the button that confirms the order
        order_button = ttk.Button(self.frame, text="Place Order", command=self.place_order)
        order_button.grid(row=3, column=0, columnspan=2, padx=10, pady=10)

        #shows the change label
        self.change_label.grid(row=4, column=0, columnspan=2, padx=10, pady=5)

    def place_order(self):
        selected_coffee = self.selected_coffee.get()
        coffee_price = self.coffee_options[selected_coffee]

        options = []
        if self.sugar_var.get():
            options.append("Sugar")
        if self.milk_var.get():
            options.append("Milk")

        payment = self.payment_var.get()
        change = payment - coffee_price

        if change < 0:
            messagebox.showerror("Payment Error", "You did not insert enough money for your specific order. Please add more money.")
        else:
            #message box for the order
            order_message = f"Selected Coffee: {selected_coffee}\nAdditions: {', '.join(options)}\nPrice: DHS{coffee_price:.2f}\nPayment: DHS{payment:.2f}\nChange: DHS{change:.2f}"
            messagebox.showinfo("Order Confirmation", order_message)

            #update the change label
            self.change_label.config(text=f"Change: DHS{change:.2f}")


if __name__ == "__main__":
    root = tk.Tk()
    app = CoffeeVendingMachine(root)
    root.mainloop()
---------------------------------------------------------------------------------
import tkinter as tk
from tkinter import ttk, messagebox
import math

class AreaCalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Area Calculator")

        self.notebook = ttk.Notebook(self.root)
        self.notebook.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

        self.create_circle_tab()
        self.create_square_tab()
        self.create_rectangle_tab()

    def create_circle_tab(self):
        circle_tab = ttk.Frame(self.notebook)
        self.notebook.add(circle_tab, text="Circle")

        radius_label = ttk.Label(circle_tab, text="Enter the radius:")
        radius_label.grid(row=0, column=0, padx=10, pady=10, sticky="w")

        self.radius_entry = ttk.Entry(circle_tab)
        self.radius_entry.grid(row=0, column=1, padx=10, pady=10)

        calculate_button = ttk.Button(circle_tab, text="Calculate", command=self.calculate_circle_area)
        calculate_button.grid(row=1, column=0, columnspan=2, padx=10, pady=10)

        self.circle_result_label = ttk.Label(circle_tab, text="")
        self.circle_result_label.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

    def create_square_tab(self):
        square_tab = ttk.Frame(self.notebook)
        self.notebook.add(square_tab, text="Square")

        side_label = ttk.Label(square_tab, text="Enter the side length:")
        side_label.grid(row=0, column=0, padx=10, pady=10, sticky="w")

        self.side_entry = ttk.Entry(square_tab)
        self.side_entry.grid(row=0, column=1, padx=10, pady=10)

        calculate_button = ttk.Button(square_tab, text="Calculate", command=self.calculate_square_area)
        calculate_button.grid(row=1, column=0, columnspan=2, padx=10, pady=10)

        self.square_result_label = ttk.Label(square_tab, text="")
        self.square_result_label.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

    def create_rectangle_tab(self):
        rectangle_tab = ttk.Frame(self.notebook)
        self.notebook.add(rectangle_tab, text="Rectangle")

        length_label = ttk.Label(rectangle_tab, text="Enter the length:")
        length_label.grid(row=0, column=0, padx=10, pady=10, sticky="w")

        width_label = ttk.Label(rectangle_tab, text="Enter the width:")
        width_label.grid(row=1, column=0, padx=10, pady=10, sticky="w")

        self.length_entry = ttk.Entry(rectangle_tab)
        self.length_entry.grid(row=0, column=1, padx=10, pady=10)

        self.width_entry = ttk.Entry(rectangle_tab)
        self.width_entry.grid(row=1, column=1, padx=10, pady=10)

        calculate_button = ttk.Button(rectangle_tab, text="Calculate", command=self.calculate_rectangle_area)
        calculate_button.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

        self.rectangle_result_label = ttk.Label(rectangle_tab, text="")
        self.rectangle_result_label.grid(row=3, column=0, columnspan=2, padx=10, pady=10)

    def calculate_circle_area(self):
        try:
            radius = float(self.radius_entry.get())
            area = math.pi * radius ** 2
            self.circle_result_label.config(text=f"Area of the circle: {area:.2f}")
        except ValueError:
            messagebox.showerror("Input Error", "Please enter a valid radius.")

    def calculate_square_area(self):
        try:
            side = float(self.side_entry.get())
            area = side ** 2
            self.square_result_label.config(text=f"Area of the square: {area:.2f}")
        except ValueError:
            messagebox.showerror("Input Error", "Please enter a valid side length.")

    def calculate_rectangle_area(self):
        try:
            length = float(self.length_entry.get())
            width = float(self.width_entry.get())
            area = length * width
            self.rectangle_result_label.config(text=f"Area of the rectangle: {area:.2f}")
        except ValueError:
            messagebox.showerror("Input Error", "Please enter valid length and width.")

if __name__ == "__main__":
    root = tk.Tk()
    app = AreaCalculator(root)
    root.mainloop()
--------------------------------------------------------------------------------
import tkinter as tk

class ShapeDrawer:
    def __init__(self, root):
        self.root = root
        self.root.title("Shape Drawer")

        self.canvas = tk.Canvas(self.root, width=400, height=400, bg="white")
        self.canvas.pack()

        shape_label = tk.Label(self.root, text="Select a shape:")
        shape_label.pack()

        self.shape_var = tk.StringVar()
        self.shape_var.set("Oval")

        shape_options = ["Oval", "Rectangle", "Square", "Triangle"]
        shape_menu = tk.OptionMenu(self.root, self.shape_var, *shape_options)
        shape_menu.pack()

        draw_button = tk.Button(self.root, text="Draw Shape", command=self.draw_shape)
        draw_button.pack()

    def draw_shape(self):
        self.canvas.delete("all")  #Deletes the canvas for a restart
        #if else and elif loop for the selected shape and the color of it
        selected_shape = self.shape_var.get()
        if selected_shape == "Oval":
            self.canvas.create_oval(50, 50, 350, 200, fill="blue")
        elif selected_shape == "Rectangle":
            self.canvas.create_rectangle(50, 50, 350, 200, fill="red")
        elif selected_shape == "Square":
            self.canvas.create_rectangle(100, 100, 250, 250, fill="green")
        elif selected_shape == "Triangle":
            self.canvas.create_polygon(50, 200, 200, 50, 350, 200, fill="orange")

if __name__ == "__main__":
    root = tk.Tk()
    app = ShapeDrawer(root)
    root.mainloop()
